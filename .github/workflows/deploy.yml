name: Deploy Application

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      cloud_connection_id:
        description: 'Cloud connection ID'
        required: true
        type: string
      region:
        description: 'AWS Region'
        required: true
        default: 'il-central-1'
        type: choice
        options:
        - il-central-1
        - us-east-1
        - us-west-2
        - eu-west-1
        - ap-southeast-1

env:
  NODE_VERSION: '18'
  AWS_REGION: ${{ github.event.inputs.region || 'il-central-1' }}
  DEPLOYMENT_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.validate.outputs.should-deploy }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Validate environment variables
        run: |
          echo "Validating environment configuration..."
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Manual deployment triggered"
            echo "Environment: ${{ env.DEPLOYMENT_ENVIRONMENT }}"
            echo "Region: ${{ env.AWS_REGION }}"
            echo "Cloud Connection ID: ${{ github.event.inputs.cloud_connection_id }}"
          else
            echo "Automatic deployment from branch: ${{ github.ref_name }}"
            if [ "${{ github.ref_name }}" = "main" ]; then
              echo "Deploying to production"
            else
              echo "Deploying to staging"
            fi
          fi

      - name: Check deployment readiness
        id: validate
        run: |
          # Check if we have required secrets
          if [ -z "${{ secrets.AWS_ACCESS_KEY_ID }}" ] || [ -z "${{ secrets.AWS_SECRET_ACCESS_KEY }}" ]; then
            echo "❌ AWS credentials not configured"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check if we have deployment configuration
          if [ ! -f "docker-compose.yml" ]; then
            echo "❌ docker-compose.yml not found"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          echo "✅ Deployment validation passed"
          echo "should-deploy=true" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate
          cd backend && npm audit --audit-level=moderate
          cd ../frontend && npm audit --audit-level=moderate

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-deploy == 'true'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup database
        run: |
          cd backend
          npm run prisma:generate
          npm run prisma:migrate:deploy

      - name: Run backend tests
        run: |
          cd backend
          npm test
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          NODE_ENV: test

      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [validate, security-scan, test]
    if: needs.validate.outputs.should-deploy == 'true'
    outputs:
      backend-image: ${{ steps.build.outputs.backend-image }}
      frontend-image: ${{ steps.build.outputs.frontend-image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ secrets.DOCKER_USERNAME }}/deployai-backend
            ${{ secrets.DOCKER_USERNAME }}/deployai-frontend
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-

      - name: Build and push backend
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
        outputs:
          backend-image: ${{ steps.meta.outputs.tags }}

      - name: Build and push frontend
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
        outputs:
          frontend-image: ${{ steps.meta.outputs.tags }}

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: |
      needs.validate.outputs.should-deploy == 'true' && 
      (github.ref_name == 'develop' || github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: terraform apply for staging
          echo "Staging deployment completed"

      - name: Run smoke tests
        run: |
          echo "Running smoke tests for staging..."
          # Add smoke test commands here
          sleep 30
          curl -f http://staging.yourdomain.com/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Staging deployment successful"
          else
            echo "❌ Staging deployment failed"
          fi

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate, build, deploy-staging]
    if: |
      needs.validate.outputs.should-deploy == 'true' && 
      (github.ref_name == 'main' || github.event.inputs.environment == 'production')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
          # Example: terraform apply for production
          echo "Production deployment completed"

      - name: Run health checks
        run: |
          echo "Running health checks for production..."
          # Add health check commands here
          sleep 30
          curl -f https://yourdomain.com/health || exit 1

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Production deployment successful"
          else
            echo "❌ Production deployment failed"
          fi

  post-deployment:
    name: Post-Deployment Tasks
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Update deployment status
        run: |
          echo "Updating deployment status..."
          # Add any post-deployment tasks here
          # Example: Update deployment tracking, send notifications, etc.

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary resources..."
          # Add cleanup tasks here

      - name: Deployment Summary
        if: always()
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.DEPLOYMENT_ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.deploy-staging.result || needs.deploy-production.result }}" >> $GITHUB_STEP_SUMMARY 