name: Deploy to AWS via Deploy.AI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      cloud_connection_id:
        description: 'Cloud Connection ID from Deploy.AI'
        required: true
        type: string

env:
  DEPLOY_AI_API_URL: ${{ secrets.DEPLOY_AI_API_URL || 'https://7e72-77-137-25-91.ngrok-free.app' }}
  DEPLOY_AI_TOKEN: ${{ secrets.DEPLOY_AI_TOKEN }}

jobs:
  analyze-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run tests
        run: |
          npm test
          cd backend && npm test
          cd ../frontend && npm test

      - name: Build application
        run: |
          cd backend && npm run build
          cd ../frontend && npm run build

      - name: Get deployment environment
        id: environment
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          else
            echo "environment=staging" >> $GITHUB_OUTPUT
          fi

      - name: Get cloud connection ID
        id: cloud_connection
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "connection_id=${{ github.event.inputs.cloud_connection_id }}" >> $GITHUB_OUTPUT
          else
            # Use default cloud connection from secrets
            echo "connection_id=${{ secrets.DEFAULT_CLOUD_CONNECTION_ID }}" >> $GITHUB_OUTPUT
          fi

      - name: Create deployment via Deploy.AI API
        if: github.event_name != 'pull_request'
        run: |
          echo "Creating deployment for environment: ${{ steps.environment.outputs.environment }}"
          
          # Prepare deployment payload
          cat > deployment.json << EOF
          {
            "repositoryId": "${{ secrets.REPOSITORY_ID }}",
            "cloudConnectionId": "${{ steps.cloud_connection.outputs.connection_id }}",
            "environment": "${{ steps.environment.outputs.environment }}",
            "region": "${{ secrets.AWS_REGION || 'il-central-1' }}",
            "terraformVersion": "1.5.0",
            "variables": {
              "instance_type": "t3.medium",
              "environment": "${{ steps.environment.outputs.environment }}",
              "git_commit_sha": "${{ github.sha }}",
              "git_branch": "${{ github.ref_name }}"
            }
          }
          EOF
          
          # Create deployment
          response=$(curl -s -X POST \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ env.DEPLOY_AI_TOKEN }}" \
            -d @deployment.json \
            "${{ env.DEPLOY_AI_API_URL }}/api/deployments")
          
          echo "Deployment response: $response"
          
          # Extract deployment ID
          deployment_id=$(echo $response | jq -r '.deployment.id')
          echo "deployment_id=$deployment_id" >> $GITHUB_OUTPUT
          
          if [ "$deployment_id" = "null" ] || [ -z "$deployment_id" ]; then
            echo "Failed to create deployment"
            echo "Response: $response"
            exit 1
          fi

      - name: Wait for deployment completion
        if: github.event_name != 'pull_request'
        run: |
          deployment_id="${{ steps.create_deployment.outputs.deployment_id }}"
          max_attempts=30
          attempt=1
          
          while [ $attempt -le $max_attempts ]; do
            echo "Checking deployment status (attempt $attempt/$max_attempts)..."
            
            status_response=$(curl -s -X GET \
              -H "Authorization: Bearer ${{ env.DEPLOY_AI_TOKEN }}" \
              "${{ env.DEPLOY_AI_API_URL }}/api/deployments/$deployment_id")
            
            status=$(echo $status_response | jq -r '.deployment.status')
            echo "Current status: $status"
            
            if [ "$status" = "deployed" ]; then
              echo "‚úÖ Deployment completed successfully!"
              deployment_url=$(echo $status_response | jq -r '.deployment.deploymentUrl')
              if [ "$deployment_url" != "null" ]; then
                echo "Deployment URL: $deployment_url"
                echo "deployment_url=$deployment_url" >> $GITHUB_OUTPUT
              fi
              break
            elif [ "$status" = "failed" ]; then
              echo "‚ùå Deployment failed!"
              error_message=$(echo $status_response | jq -r '.deployment.errorMessage')
              echo "Error: $error_message"
              exit 1
            fi
            
            sleep 30
            attempt=$((attempt + 1))
          done
          
          if [ $attempt -gt $max_attempts ]; then
            echo "‚ùå Deployment timed out after $max_attempts attempts"
            exit 1
          fi

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `üöÄ **Deploy.AI Analysis Complete**
              
              This PR has been analyzed and is ready for deployment.
              
              **Environment:** ${{ steps.environment.outputs.environment }}
              **Branch:** ${{ github.ref_name }}
              **Commit:** \`${{ github.sha }}\`
              
              To deploy this PR, merge it to the main branch or use the manual workflow dispatch.`
            })

      - name: Update deployment status
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentUrl = '${{ steps.wait_deployment.outputs.deployment_url }}';
            const environment = '${{ steps.environment.outputs.environment }}';
            
            if (deploymentUrl && deploymentUrl !== 'null') {
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                target_url: deploymentUrl,
                description: `Deployed to ${environment}`,
                context: `Deploy.AI - ${environment}`
              });
            } else {
              github.rest.repos.createCommitStatus({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                state: 'success',
                description: `Deployed to ${environment}`,
                context: `Deploy.AI - ${environment}`
              });
            } 