name: Infrastructure Provisioning

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'terraform/**'
      - 'infrastructure/**'
      - '.github/workflows/infrastructure.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - 'infrastructure/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to provision'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
        - plan
        - apply
        - destroy
      region:
        description: 'AWS Region'
        required: true
        default: 'il-central-1'
        type: choice
        options:
        - il-central-1
        - us-east-1
        - us-west-2
        - eu-west-1
        - ap-southeast-1

env:
  TF_VERSION: '1.5.0'
  AWS_REGION: ${{ github.event.inputs.region || 'il-central-1' }}
  ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
  TF_ACTION: ${{ github.event.inputs.action || 'plan' }}

jobs:
  validate:
    name: Validate Infrastructure
    runs-on: ubuntu-latest
    outputs:
      should-provision: ${{ steps.validate.outputs.should-provision }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Validate Terraform configuration
        id: validate
        run: |
          echo "Validating Terraform configuration..."
          
          # Check if Terraform files exist
          if [ ! -d "terraform" ] && [ ! -d "infrastructure" ]; then
            echo "‚ùå No Terraform configuration found"
            echo "should-provision=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Find Terraform directories
          find . -name "*.tf" -type f | head -1 | while read file; do
            tf_dir=$(dirname "$file")
            echo "Found Terraform configuration in: $tf_dir"
            
            cd "$tf_dir"
            
            # Initialize Terraform
            terraform init -backend=false
            
            # Validate configuration
            terraform validate
            
            # Format check
            terraform fmt -check
            
            echo "‚úÖ Terraform validation passed for $tf_dir"
          done
          
          echo "should-provision=true" >> $GITHUB_OUTPUT

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    if: needs.validate.outputs.should-provision == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov security scan
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          soft_fail: true

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.44.1

      - name: Run TFLint
        run: |
          cd terraform
          tflint --init
          tflint

  plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: [validate, security-scan]
    if: |
      needs.validate.outputs.should-provision == 'true' && 
      (github.event_name == 'pull_request' || env.TF_ACTION == 'plan')
    environment: ${{ env.ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform backend
        run: |
          cd terraform
          
          # Configure backend for the environment
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket = "deployai-terraform-state-${{ env.ENVIRONMENT }}"
              key    = "terraform.tfstate"
              region = "${{ env.AWS_REGION }}"
            }
          }
          EOF

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        id: plan
        run: |
          cd terraform
          
          # Set environment-specific variables
          export TF_VAR_environment="${{ env.ENVIRONMENT }}"
          export TF_VAR_region="${{ env.AWS_REGION }}"
          export TF_VAR_project_name="deployai"
          export TF_VAR_git_commit_sha="${{ github.sha }}"
          export TF_VAR_git_branch="${{ github.ref_name }}"
          
          # Run plan
          terraform plan -out=tfplan
          
          # Save plan for apply job
          terraform show -no-color tfplan > plan.txt

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('terraform/plan.txt', 'utf8');
            
            const comment = `## üèóÔ∏è Terraform Plan
            
            **Environment:** ${{ env.ENVIRONMENT }}
            **Region:** ${{ env.AWS_REGION }}
            **Action:** Plan
            
            <details>
            <summary>üìã Plan Output</summary>
            
            \`\`\`hcl
            ${plan}
            \`\`\`
            
            </details>
            
            ---
            *This plan was generated for commit \`${{ github.sha }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: [validate, security-scan, plan]
    if: |
      needs.validate.outputs.should-provision == 'true' && 
      (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') &&
      env.TF_ACTION == 'apply'
    environment: ${{ env.ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform backend
        run: |
          cd terraform
          
          # Configure backend for the environment
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket = "deployai-terraform-state-${{ env.ENVIRONMENT }}"
              key    = "terraform.tfstate"
              region = "${{ env.AWS_REGION }}"
            }
          }
          EOF

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Apply
        run: |
          cd terraform
          
          # Set environment-specific variables
          export TF_VAR_environment="${{ env.ENVIRONMENT }}"
          export TF_VAR_region="${{ env.AWS_REGION }}"
          export TF_VAR_project_name="deployai"
          export TF_VAR_git_commit_sha="${{ github.sha }}"
          export TF_VAR_git_branch="${{ github.ref_name }}"
          
          # Apply changes
          terraform apply -auto-approve

      - name: Get outputs
        id: outputs
        run: |
          cd terraform
          
          # Get Terraform outputs
          terraform output -json > outputs.json
          
          # Extract important outputs
          if [ -f outputs.json ]; then
            echo "outputs=$(cat outputs.json)" >> $GITHUB_OUTPUT
            
            # Extract specific values if they exist
            alb_dns_name=$(terraform output -raw alb_dns_name 2>/dev/null || echo "")
            rds_endpoint=$(terraform output -raw rds_endpoint 2>/dev/null || echo "")
            
            if [ ! -z "$alb_dns_name" ]; then
              echo "alb_dns_name=$alb_dns_name" >> $GITHUB_OUTPUT
            fi
            
            if [ ! -z "$rds_endpoint" ]; then
              echo "rds_endpoint=$rds_endpoint" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Update deployment status
        run: |
          echo "## üöÄ Infrastructure Deployed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: Apply" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
          if [ ! -z "${{ steps.outputs.outputs.alb_dns_name }}" ]; then
            echo "- **Load Balancer**: ${{ steps.outputs.outputs.alb_dns_name }}" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ ! -z "${{ steps.outputs.outputs.rds_endpoint }}" ]; then
            echo "- **Database**: ${{ steps.outputs.outputs.rds_endpoint }}" >> $GITHUB_STEP_SUMMARY
          fi

  destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    needs: [validate]
    if: |
      needs.validate.outputs.should-provision == 'true' && 
      env.TF_ACTION == 'destroy'
    environment: ${{ env.ENVIRONMENT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform backend
        run: |
          cd terraform
          
          # Configure backend for the environment
          cat > backend.tf << EOF
          terraform {
            backend "s3" {
              bucket = "deployai-terraform-state-${{ env.ENVIRONMENT }}"
              key    = "terraform.tfstate"
              region = "${{ env.AWS_REGION }}"
            }
          }
          EOF

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Destroy
        run: |
          cd terraform
          
          # Set environment-specific variables
          export TF_VAR_environment="${{ env.ENVIRONMENT }}"
          export TF_VAR_region="${{ env.AWS_REGION }}"
          export TF_VAR_project_name="deployai"
          export TF_VAR_git_commit_sha="${{ github.sha }}"
          export TF_VAR_git_branch="${{ github.ref_name }}"
          
          # Destroy infrastructure
          terraform destroy -auto-approve

      - name: Update destruction status
        run: |
          echo "## üóëÔ∏è Infrastructure Destroyed Successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: Destroy" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY

  post-provisioning:
    name: Post-Provisioning Tasks
    runs-on: ubuntu-latest
    needs: [apply, destroy]
    if: always()
    steps:
      - name: Update infrastructure status
        run: |
          echo "Updating infrastructure status..."
          # Add any post-provisioning tasks here
          # Example: Update monitoring, send notifications, etc.

      - name: Cleanup
        if: always()
        run: |
          echo "Cleaning up temporary resources..."
          # Add cleanup tasks here

      - name: Infrastructure Summary
        if: always()
        run: |
          echo "## üèóÔ∏è Infrastructure Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment**: ${{ env.ENVIRONMENT }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Region**: ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ env.TF_ACTION }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ needs.apply.result || needs.destroy.result }}" >> $GITHUB_STEP_SUMMARY 