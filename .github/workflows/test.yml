name: Test and Quality Checks

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run linting
        run: |
          echo "Running ESLint..."
          npm run lint
          cd backend && npm run lint
          cd ../frontend && npm run lint

      - name: Run type checking
        run: |
          echo "Running TypeScript type checking..."
          cd backend && npx tsc --noEmit
          cd ../frontend && npx tsc --noEmit

      - name: Run tests
        run: |
          echo "Running tests..."
          npm test
          cd backend && npm test
          cd ../frontend && npm test

      - name: Run security audit
        run: |
          echo "Running security audit..."
          npm audit --audit-level moderate
          cd backend && npm audit --audit-level moderate
          cd ../frontend && npm audit --audit-level moderate

  quality-gates:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run code coverage
        run: |
          echo "Running code coverage..."
          npm run test:coverage
          cd backend && npm run test:coverage
          cd ../frontend && npm run test:coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Check bundle size
        run: |
          echo "Checking bundle size..."
          cd frontend && npm run build
          npx bundlewatch --config bundlewatch.json

      - name: Run performance tests
        run: |
          echo "Running performance tests..."
          npm run test:performance

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  docker-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker images
        run: |
          docker build -t deployai-backend:test ./backend
          docker build -t deployai-frontend:test ./frontend

      - name: Run Trivy vulnerability scanner on Docker images
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'deployai-backend:test'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Run Trivy vulnerability scanner on frontend image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'deployai-frontend:test'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Upload Docker scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

      - name: Upload frontend scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test, quality-gates]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_DB: deployai_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Setup test environment
        run: |
          cd backend
          echo "DATABASE_URL=postgresql://postgres:password@localhost:5432/deployai_test" > .env.test
          echo "REDIS_URL=redis://localhost:6379" >> .env.test
          echo "JWT_SECRET=test-secret-key" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: |
          cd backend
          npm run prisma:migrate:test

      - name: Run integration tests
        run: |
          cd backend
          npm run test:integration

      - name: Run API tests
        run: |
          cd backend
          npm run test:api

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [test, quality-gates]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd playwright && npm ci

      - name: Install Playwright browsers
        run: |
          cd playwright
          npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          cd playwright
          npm run test

      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: playwright/playwright-report/
          retention-days: 30

  notify:
    runs-on: ubuntu-latest
    needs: [test, quality-gates, security-scan, docker-security, integration-tests, e2e-tests]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const failedJobs = '${{ needs.*.result }}'.split(',').filter(result => result === 'failure');
            
            if (failedJobs.length > 0) {
              github.rest.issues.createComment({
                issue_number: context.issue.number || 1,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `❌ **Quality Gates Failed**
                
                The following checks failed:
                ${failedJobs.map(job => `- ${job}`).join('\n')}
                
                Please review the logs and fix the issues before proceeding with deployment.`
              });
            }

      - name: Notify on success
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number || 1,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `✅ **All Quality Gates Passed**
              
              All tests, security scans, and quality checks have passed successfully.
              
              **Ready for deployment!** 🚀
              
              - Unit tests: ✅
              - Integration tests: ✅
              - E2E tests: ✅
              - Security scans: ✅
              - Code coverage: ✅
              - Bundle size: ✅`
            }); 