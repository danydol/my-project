name: Test and Quality Assurance

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly
    - cron: '0 2 * * 1'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Type of tests to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - unit
        - integration
        - e2e
        - security
      environment:
        description: 'Test environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  TEST_ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}

jobs:
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run ESLint (Backend)
        run: |
          cd backend
          npm run lint

      - name: Run ESLint (Frontend)
        run: |
          cd frontend
          npm run lint

      - name: Check code formatting
        run: |
          cd backend && npm run format:check
          cd ../frontend && npm run format:check

      - name: Run Prettier check
        run: |
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: |
          npm audit --audit-level=high
          cd backend && npm audit --audit-level=high
          cd ../frontend && npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        project: [backend, frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd ${{ matrix.project }} && npm ci

      - name: Run unit tests (${{ matrix.project }})
        run: |
          cd ${{ matrix.project }}
          npm test -- --coverage --watchAll=false

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./${{ matrix.project }}/coverage/lcov.info
          flags: ${{ matrix.project }}
          name: ${{ matrix.project }}-coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'integration'
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Setup database
        run: |
          cd backend
          npm run prisma:generate
          npm run prisma:migrate:deploy

      - name: Run backend integration tests
        run: |
          cd backend
          npm run test:integration
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

      - name: Run API tests
        run: |
          cd backend
          npm run test:api
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379
          NODE_ENV: test

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'e2e'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd playwright && npm ci

      - name: Install Playwright browsers
        run: |
          cd playwright
          npx playwright install --with-deps

      - name: Run Playwright tests
        run: |
          cd playwright
          npm run test
        env:
          TEST_ENVIRONMENT: ${{ env.TEST_ENVIRONMENT }}

      - name: Upload Playwright results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-results
          path: playwright/test-results/
          retention-days: 30

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: playwright/playwright-report/
          retention-days: 30

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    if: github.event.inputs.test_type == 'all'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Run Artillery performance tests
        run: |
          cd backend
          npm install -g artillery
          artillery run tests/performance/load-test.yml

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Run SonarQube analysis
        uses: sonarqube-quality-gate-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=deployai
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.coverage.exclusions=**/*.test.js,**/*.spec.js,**/tests/**

      - name: Run complexity analysis
        run: |
          npm install -g complexity-report
          find . -name "*.js" -not -path "./node_modules/*" -not -path "./dist/*" | xargs complexity-report

  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Check for outdated dependencies
        run: |
          echo "Checking for outdated dependencies..."
          npm outdated || echo "No outdated dependencies found"
          cd backend && npm outdated || echo "No outdated backend dependencies found"
          cd ../frontend && npm outdated || echo "No outdated frontend dependencies found"

      - name: Check for unused dependencies
        run: |
          npm install -g depcheck
          depcheck
          cd backend && depcheck
          cd ../frontend && depcheck

  build-test:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [lint, unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd backend && npm ci
          cd ../frontend && npm ci

      - name: Test backend build
        run: |
          cd backend
          npm run build

      - name: Test frontend build
        run: |
          cd frontend
          npm run build

      - name: Test Docker builds
        run: |
          docker build -t deployai-backend-test ./backend
          docker build -t deployai-frontend-test ./frontend

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, security-scan, unit-tests, integration-tests, e2e-tests, code-quality, build-test]
    if: always()
    steps:
      - name: Check all tests passed
        run: |
          echo "Checking quality gate conditions..."
          
          # Check if all required jobs passed
          if [ "${{ needs.lint.result }}" != "success" ]; then
            echo "❌ Lint check failed"
            exit 1
          fi
          
          if [ "${{ needs.security-scan.result }}" != "success" ]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          
          if [ "${{ needs.unit-tests.result }}" != "success" ]; then
            echo "❌ Unit tests failed"
            exit 1
          fi
          
          if [ "${{ needs.build-test.result }}" != "success" ]; then
            echo "❌ Build test failed"
            exit 1
          fi
          
          echo "✅ All quality gate conditions passed"

      - name: Generate test report
        if: always()
        run: |
          echo "## 🧪 Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Lint**: ${{ needs.lint.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan**: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ needs.integration-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Test**: ${{ needs.build-test.result }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.quality-gate.result }}" == "success" ]; then
            echo "## ✅ Quality Gate Passed" >> $GITHUB_STEP_SUMMARY
            echo "All tests and quality checks passed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ❌ Quality Gate Failed" >> $GITHUB_STEP_SUMMARY
            echo "Some tests or quality checks failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
          fi 